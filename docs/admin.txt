.. _admin:

===========================
The FeinCMS admin interface
===========================

FeinCMS provides three ModelAdmin classes, ``ItemEditor``, ``TreeEditor`` and
``SplitPaneEditor``. Their purpose and their customization hooks are briefly
discussed here.


The tree editor
===============

The tree editor replaces the standard change list interface with a collapsible,
item tree. The model must be registered with ``django-mptt`` for this to work.

.. image:: images/tree_editor.png

Usage is as follows:

::

    from django.contrib import admin
    from feincms.admin import editor
    from yourapp.models import YourModel

    class YourModelAdmin(editor.TreeEditor):
        pass

    admin.site.register(YourModel, YourModelAdmin)


The columns shown in the tree editor can be specified using ``list_display``. Please
note that the first column is hardcoded as the value of ``__unicode__`` currently.
In the future, the tree editor might even take the setting ``list_editable``
into account.


Using the ajax boolean toggle functionality
-------------------------------------------

The tree editor allows you to define boolean columns which let the website
administrator change the value of the boolean using a simple click on the icon.

Usage:

::

    from django.contrib import admin
    from feincms.admin import editor
    import mptt

    class Category(models.Model):
        active = models.BooleanField()
        name = models.CharField(...)
        parent = models.ForeignKey('self', blank=True, null=True)

        # ...
    mptt.register(Category)

    class CategoryAdmin(editor.TreeEditor):
        list_display = ('__unicode__', 'active_toggle')
        active_toggle = editor.ajax_editable_boolean('active', _('active'))



The item editor
===============

The tree editor replaces the edit view (NOT the add form, therefore you may
still use ``fieldsets``, etc. to customize the form which is used to add new
items.

.. image:: images/item_editor_content.png
.. image:: images/item_editor_properties.png

Customization the item editor
-----------------------------

* ``show_on_top``

  A tuple which describes, which fields should be shown above the tabbed item
  editor interface.


Customizing the individual content type forms
---------------------------------------------

Customizing the individual content type editors is easily possible through two
settings on the content type model itself:

* ``feincms_item_editor_context_processors``:

  A list of callables using which you may add additional values to the item
  editor templates.

* ``feincms_item_editor_form``:

  You can specify the base class which should be used for the content type
  model. The default value is ``django.forms.ModelForm``.

* ``feincms_item_editor_includes``:

  If you need additional javascript or CSS files or need to perform additional
  initialization on your content type forms, you can specify template fragments
  which are included in predefined places into the item editor.

  If you need to execute additional javascript, f.e. add a TinyMCE instance,
  it is recommended to add the initialization functions to the
  `contentblock_init_handlers` array, because the initialization needs to be
  performed not only on page load, but also after drag-dropping a content block
  and after adding new content blocks. Take a look at the ``mediafile`` and
  ``richtext`` item editor include files to understand how this should be done.



The split pane editor
=====================

The split pane editor replaces the change list with two frames, a draggable
and collapsible tree on the left and arbitrary information on the right.
The interface is somewhat inspired by other popular tools such as Typo3 or
PHPMyAdmin, which offer a framed interface for editing content too.

The split pane editor does not modify the content on the right hand side in
any way -- it does not care whether you have standard django administration
forms, an item editor or even preview functionality in the right hand side.

Currently the split pane editor does not offer any customization hooks.

.. image:: images/split_pane_editor.png


Putting it all together
=======================

Best advice here is taking a look at the files inside ``feincms/module/page/``.

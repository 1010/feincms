==========================
Frequently Asked Questions
==========================

This FAQ serves two purposes. Firstly, it does what a FAQ generally does --
answer frequently asked questions. Secondly, it is also a place to dump
fragments of documentation which haven't matured enough to be moved into
their own documentation file.



Should I extend the builtin modules and contents, or should I write my own?
===========================================================================

The answer is, as often, the nearly useless "It depends". The built-in modules
serve two purposes: On one hand, they should be ready to use and demonstrate
the power of FeinCMS. On the other hand, they should be simple enough to serve
as examples for you if you want to build your own CMS-like system using the
tools provided by FeinCMS.

If a proposed feature greatly enhances the modules' or content types'
abilities without adding heaps of code, chances are pretty good that it will
be accepted into FeinCMS core. Anyway, the tools included should be so easy
to use that you might still want to build your own page CMS, if your needs
are very different from those of the original authors. If you don't like
monkey patching at all, or if the list of extensions you want to use grows
too big, it might be time to reconsider whether you really want to use the
extension mechanism or if it might not be easier to start freshly, only
using the editor admin classes, feincms.models.Base and maybe parts of the
included PageManager...



How can I let 3rd-party apps extend the navigation?
===================================================

Short answer: You need the ``navigation`` extension module. Activate it like
this:

::

    Page.register_extensions('navigation')


Please note however, that this call needs to come after all
NavigationExtension subclasses have been processed, because otherwise they
will not be available for selection in the page administration!

Because the use cases for extended navigations are so different, FeinCMS
does not go to great lengths trying to cover them all. What it does though
is to let you execute code to filter, replace or add navigation entries when
generating a list of navigation entries.

If you have a blog and you want to display the blog categories as subnavigation
entries, you could do it as follows:

Create a navigation extension for the blog categories
-----------------------------------------------------

::

    class BlogCategoriesNavigationExtension(NavigationExtension):
        name = _('blog categories')

        def children(self, page):
            for category in Category.objects.all():
                yield PagePretender(
                    title=category.name,
                    url=category.get_absolute_url(),
                    )

    Page.register_extensions('navigation')


Assign this navigation extension to the CMS page where you want these navigation entries to appear
--------------------------------------------------------------------------------------------------

Modify your template so that the extended navigation will actually be rendered
------------------------------------------------------------------------------

::

    TODO redo this section with the improved feincms_navigation tag

    {% if feincms_page.navigation_extension %}
        {% for entry in feincms_page.extended_navigation %}
            <a href="{{ entry.get_absolute_url }}">{{ entry.title }}</a>
        {% endfor %}
    {% else %}
        {# use the standard way for generating the navigation, f.e. the #}
        {# feincms_navigation template tag #}
    {% endif %}

This extension could be used to pass through the children of the current
page unmodified -- you could also apply some filtering to the entries:

::

    class PassthroughExtension(NavigationExtension):
        name = 'passthrough extension'

        def children(self, page):
            for p in page.children.in_navigation():
                yield p

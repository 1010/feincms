===================================
HOWTO: Use the built-in page module
===================================

FeinCMS is primarily a system to work with lists of content blocks which
you can assign to arbitrary other objects. You do not necessarily have to
use it with a hierarchical page structure, but that's the most common use
case of course. Being able to put content together in small manageable
pieces is interesting for other uses too, i.e. for weblog entries where you
have rich text content interspersed with images, videos or maybe even galleries.

To activate the page module, you need to follow the instructions in
installation.txt and afterwards add ``feincms.module.page'' to your
``INSTALLED_APPS''.

You need to create some content models. No models are created by default,
because there is no possibility to unregister models. A sane default might
be to create ``ImageContent``and ``RichTextContent'' models; you can do this
by adding the following lines somewhere into your project, for example in a
``models.py'' file that will be processed anyway:

::

    from feincms.module.page.models import Page
    from feincms.content.richtext.models import RichTextContent
    from feincms.content.image.models import ImageContent

    Page.create_content_type(RichTextContent)
    Page.create_content_type(ImageContent)


It will be a good idea most of the time to register the RichTextContent
first, because it's the most used content type for many applications. The
content type dropdown will contain content types in the same order as they
were registered.


Setting up the admin interface
==============================

The customized admin interface code is contained inside the ``ModelAdmin''
subclass, so you do not need to do anything special here. You only need to set
``FEINCMS_ADMIN_MEDIA'' as described in the installation documentation.


Wiring up the views
===================

Just add the following lines to your ``urls.py'' to get a catch-all URL pattern:

::

    urlpatterns += patterns('',
        url(r'^(.*)$', 'feincms.views.base.handler'),
    )


There isn't a possibility (yet?) to specify a homepage; the needs are
often different, and it's not a big problem writing your own home page view.
I often do the following:

::

    urlpatterns += patterns('',
        url(r'^$', 'myproject.views.home'),

        # include urls for other django applications

        url(r'^(.*)/$', 'feincms.views.base.handler'),
    )


And inside ``views.py'':

::

    from feincms.views.base import handler

    def home(request):
        return handler(request, '/home/')


The home view would also be the place to decide which webpage to show f.e. for
multilingual sites or sites that can be accessed under different domains.

More information can be found in urlconfs-views.txt


Adding another content type
===========================

Imagine you've got a third-party gallery application and you'd like to include
excerpts of galleries inside your content. You'd need to write a ``GalleryContent''
base class and let FeinCMS create a model class for you with some important
attributes added.

::

    from django.db import models
    from django.template.loader import render_to_string
    from feincms.module.page.models import Page
    from gallery.models import Gallery

    class GalleryContent(models.Model):
        gallery = models.ForeignKey(Gallery)

        class Meta:
            abstract = True

        def render(self, **kwargs):
            return render_to_string('gallery/gallerycontent.html', {
                self.gallery.image_set.order_by('?')[:5],
                })

    Page.create_content_type(GalleryContent)


The newly created ``GalleryContent'' for ``Page'' will live in the database
table ``page_page_gallerycontent''.

It is generally recommended to make your model base class abstract, because
FeinCMS will create another class inheriting from your class, and you should
probably not use model inheritance if you don't know exactly that you'll need
it.


Using page extensions
=====================

Extensions are a way to put often-used functionality easily accessible without
cluttering up the core page model for those who do not need them. Currently,
the following extensions are available:

* navigation

  Adds navigation extensions to the page model. You can define subclasses of
  ``NavigationExtension'', which provide submenus to the navigation generation
  mechanism. This extension is bound to change and is only in proof-of-concept
  stage currently.

* titles

  Adds additional title fields to the page model. You may not only define a
  single title for the page to be used in the navigation, the <title> tag and
  inside the content area, you are not only allowed to define different titles
  for the three uses but also enabld to define titles and subtitles for the
  content area.

* translations

  Adds a language field and a recursive translations many to many field to the
  page, so that you can define the language the page is in and assign
  translations. I am currently very unhappy with state of things concerning
  the definition of translations, so that extension might change somewhat too.
  This extension also adds new instructions to the setup_request method where
  the Django i18n tools are initialized with the language given on the page
  object.


You can either import the register method in the extension models yourself or
call a helper function on the Page class as follows to activate the extensions:

::

    Page.register_extensions('navigation', 'titles', 'translations')


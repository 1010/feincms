===================================
HOWTO: Use the built-in page module
===================================

FeinCMS is primarily a system to work with lists of content blocks which
you can assign to arbitrary other objects. You do not necessarily have to
use it with a hierarchical page structure, but that's the most common use
case of course. Being able to put content together in small manageable
pieces is interesting for other uses too, f.e. for weblog entries where you
have rich text content interspersed with images, videos or maybe even galleries.

To activate the page module, you need to follow the instructions in
installation.txt and afterwards add ``feincms.module.page'' to your
``INSTALLED_APPS''.

The default is currently to create ``ImageContent``and ``RichTextContent''
models for pages. This might change in the future, especially since there is
conceptually no possibility to un-create models. It would be possible in
principle to unregister them, but the models and the associated database tables
would still get created.


Setting up the admin interface
==============================

The customized admin interface code is contained inside the ``ModelAdmin''
subclass, so you do not need to do anything special here. You only need to set
``FEINCMS_ADMIN_MEDIA'' as described in the installation documentation.


Wiring up the views
===================

Just add the following lines to your ``urls.py'' to get a catch-all URL pattern:

::

    urlpatterns += patterns('',
        url(r'^(.*)$', 'feincms.views.base.handler'),
    )


There isn't a possibility (yet?) to specify a homepage yet; the needs are
often different, and it's not a big problem writing your own home page view.
I often do the following:

::

    urlpatterns += patterns('',
        url(r'^$', 'myproject.views.home'),

        # include urls for other django applications

        url(r'^(.*)/$', 'feincms.views.base.handler'),
    )


And inside ``views.py'':

::

    from feincms.views.base import handler

    def home(request):
        return handler(request, '/home/')


The home view would also be the place to decide which webpage to show f.e. for
multilingual sites or sites that can be accessed under different domains.

More information can be foudn in urlconfs-views.txt


Adding another content type
===========================

Imagine you've got a third-party gallery application and you'd like to include
excerpts of galleries inside your content. You'd need to write a ``GalleryContent''
base class and let FeinCMS create a model class for you with some important
attributes added.

::

    from django.db import models
    from django.template.loader import render_to_string
    from feincms.module.page.models import Page
    from gallery.models import Gallery

    class GalleryContent(models.Model):
        gallery = models.ForeignKey(Gallery)

        class Meta:
            abstract = True

        def render(self, **kwargs):
            return render_to_string('gallery/gallerycontent.html', {
                self.gallery.image_set.order_by('?')[:5],
                })

    Page.create_content_type(GalleryContent)


The newly created ``GalleryContent'' for ``Page'' will live in the database
table ``page_page_gallerycontent''.


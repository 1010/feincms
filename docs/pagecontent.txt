=========================
Working with page content
=========================

You will learn how to add your own page content types and how you can
render them in a template.


Rendering page contents in your templates
=========================================

Simple:

::

    <div id="content">
        {% block content %}
        {% for content in feincms_page.content.main %}
            {{ content.render }}
        {% endfor %}
        {% endblock %}
    </div>

    <div id="sidebar">
        {% block content %}
        {% for content in feincms_page.content.sidebar %}
            {{ content.render }}
        {% endfor %}
        {% endblock %}
    </div>


Implementing your own content types
===================================

FeinCMS offers an abstract base class, `PageContent`, which provides
references to `Page` and `Region`. The ordering attribute is used to
order page content blocks of different types.


Implementing a textile content block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Without further ado, here's the first example:

::

    from feincms.module.page.models import Page
    from django.contrib.markup.templatetags.markup import textile
    from django.db import models

    class TextilePageContent(models.Model):
        content = models.TextField()

        def render(self, **kwargs):
            return textile(self.content)

    Page.create_content_type(TextilePageContent)


There are three field names you should not use because they are added
by ``create_content_type'': These are ``parent'', ``region'' and ``ordering''.
These fields are used to specify the place where the page content will be
placed in the output.



Customizing the render method for different regions
===================================================

The default `render` method uses the region key to find a render method
in your page content subclass and calls it. This allows you to customize
the output depending on the region; you might want to show the same
content differently in a sidebar and in the main region for example.
If no matching method has been found a NotImplementedError is raised.

This `render` method tries to be a sane default, nothing more. You can
simply override it and put your own code there if you do not any
differentiation, or if you want to do it differently.

All `render` methods should accept `**kwargs`. Some render methods might
need the request, for example to determine the correct Google Maps API
key depending on the current domain without resorting to ugly hacks.

The example above could be rewritten like this:

::

   {% load feincms_tags %}

    <div id="content">
        {% block content %}
        {% for content in feincms_page.content.main %}
            {% feincms_render_content content request %}
        {% endfor %}
        {% endblock %}
    </div>

    <div id="sidebar">
        {% block content %}
        {% for content in feincms_page.content.sidebar %}
            {% feincms_render_content content request %}
        {% endfor %}
        {% endblock %}
    </div>


Or even like this:

::

   {% load feincms_tags %}

    <div id="content">
        {% block content %}
        {% feincms_render_region feincms_page "main" request %}
        {% endblock %}
    </div>

    <div id="sidebar">
        {% block content %}
        {% feincms_render_region feincms_page "main" request %}
        {% endblock %}
    </div>


This does exactly the same, but you do not have to loop over the page content
blocks yourself. You need to add the request context processor to your list
of context processors for this example to work.



Bundled content types
=====================

* feincms.content.contactform.models.ContactForm

  Simple contact form. Also serves as an example how forms might be used inside
  content types.

* feincms.content.file.models.FileContent
* feincms.content.image.models.ImageContent

  These are simple content types holding just a file or an image with a
  position. You should probably use the MediaFileContent though.

* feincms.content.medialibrary.models.MediaFileContent

  Mini-framework for arbitrary file types with customizable rendering
  methods per-filetype.

* feincms.content.raw.models.RawContent

  Raw HTML code, f.e. for flash movies or javascript code.

* feincms.content.richtext.models.RichtextContent

  TinyMCE widget, stripped down to the essentials; no media support, only
  a few styles activated. The TinyMCE javascript files are not included,
  you need to put them in the right place on your own.

  Please note that you should set the TINYMCE_JS_URL inside your settings,
  otherwise settings.MEDIA_URL + 'js/tiny_mce/tiny_mce.js' will be used.

* feincms.content.rss.models.RSSContent

  A feed reader widget. This also servers as an example how to build a content
  type that needs additional processing, in this case from a cron job.

* feincms.content.video.models.VideoContent

  A easy-to-use content that automatically generates flash video inclusion code
  from a website link. Currently only youtube and vimeo links are supported.



Design considerations for content types
=======================================

Because the admin interface is already filled with information, it is sometimes
easier to keep the details for certain models outside the CMS content types.
Complicated models do not need to be edited directly in the CMS item editor,
you can instead use the standard Django administration interface for them, and
integrate them into FeinCMS by utilizing foreign keys. Already the bundled
FileContent and ImageContent models can be viewed as bad style in this respect,
because if you want to use a image or file more than once you need to upload it
for every single use instead of being able to reuse the uploaded file. The
media library module and MediaFileContent resolve at least this issue nicely by
allowing the website administrator to attach metainformation to a file and
include it in a page by simply selecting the previously uploaded media file.



Obtaining a concrete content type model
=======================================

The concrete content type models are stored in the same module as the CMS base
class, but they do not have a name using which you could import them. Using
Base._feincms_content_types seems hacky, so what is the best way to get a hold
onto the concrete content type?

There are two recommended ways. The example use a RawContent content type and
the Page CMS base class.

You could take advantage of the fact that create_content_type returns the
created model:

::
    from feincms.module.page.models import Page
    from feincms.content.raw.models import RawContent

    PageRawContent = Page.create_content_type(RawContent)


Or you could use the Django app/model cache:

::
    from django.db.models import loading

    PageRawContent = loading.get_model('page', 'RawContent')


Please note that you need to pass 'page' as module, not the place where the
RawContent abstract content type has been defined. That's because
create_content_type puts the created content type into the same module as the
CMS base class, as has been written above already.
